/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package DataBase.model.impl;

import DataBase.model.Positions;
import DataBase.model.PositionsModel;
import DataBase.model.PositionsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Positions service. Represents a row in the &quot;My_Positions&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PositionsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PositionsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PositionsImpl
 * @generated
 */
@JSON(strict = true)
public class PositionsModelImpl
	extends BaseModelImpl<Positions> implements PositionsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a positions model instance should use the <code>Positions</code> interface instead.
	 */
	public static final String TABLE_NAME = "My_Positions";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"Positions_id", Types.BIGINT},
		{"Position_name", Types.VARCHAR}, {"is_Archive", Types.BIGINT},
		{"Salary", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Positions_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Position_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("is_Archive", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Salary", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table My_Positions (uuid_ VARCHAR(75) null,Positions_id LONG not null primary key,Position_name VARCHAR(75) null,is_Archive LONG,Salary VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table My_Positions";

	public static final String ORDER_BY_JPQL =
		" ORDER BY positions.Positions_id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY My_Positions.Positions_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long POSITIONS_ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Positions toModel(PositionsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Positions model = new PositionsImpl();

		model.setUuid(soapModel.getUuid());
		model.setPositions_id(soapModel.getPositions_id());
		model.setPosition_name(soapModel.getPosition_name());
		model.setIs_Archive(soapModel.getIs_Archive());
		model.setSalary(soapModel.getSalary());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Positions> toModels(PositionsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Positions> models = new ArrayList<Positions>(soapModels.length);

		for (PositionsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PositionsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Positions_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPositions_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Positions_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Positions.class;
	}

	@Override
	public String getModelClassName() {
		return Positions.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Positions, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Positions, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Positions, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Positions)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Positions, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Positions, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Positions)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Positions, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Positions, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Positions>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Positions.class.getClassLoader(), Positions.class,
			ModelWrapper.class);

		try {
			Constructor<Positions> constructor =
				(Constructor<Positions>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Positions, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Positions, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Positions, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Positions, Object>>();
		Map<String, BiConsumer<Positions, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Positions, ?>>();

		attributeGetterFunctions.put("uuid", Positions::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Positions, String>)Positions::setUuid);
		attributeGetterFunctions.put(
			"Positions_id", Positions::getPositions_id);
		attributeSetterBiConsumers.put(
			"Positions_id",
			(BiConsumer<Positions, Long>)Positions::setPositions_id);
		attributeGetterFunctions.put(
			"Position_name", Positions::getPosition_name);
		attributeSetterBiConsumers.put(
			"Position_name",
			(BiConsumer<Positions, String>)Positions::setPosition_name);
		attributeGetterFunctions.put("is_Archive", Positions::getIs_Archive);
		attributeSetterBiConsumers.put(
			"is_Archive",
			(BiConsumer<Positions, Long>)Positions::setIs_Archive);
		attributeGetterFunctions.put("Salary", Positions::getSalary);
		attributeSetterBiConsumers.put(
			"Salary", (BiConsumer<Positions, String>)Positions::setSalary);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getPositions_id() {
		return _Positions_id;
	}

	@Override
	public void setPositions_id(long Positions_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Positions_id = Positions_id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPositions_id() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("Positions_id"));
	}

	@JSON
	@Override
	public String getPosition_name() {
		if (_Position_name == null) {
			return "";
		}
		else {
			return _Position_name;
		}
	}

	@Override
	public void setPosition_name(String Position_name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Position_name = Position_name;
	}

	@JSON
	@Override
	public long getIs_Archive() {
		return _is_Archive;
	}

	@Override
	public void setIs_Archive(long is_Archive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_is_Archive = is_Archive;
	}

	@JSON
	@Override
	public String getSalary() {
		if (_Salary == null) {
			return "";
		}
		else {
			return _Salary;
		}
	}

	@Override
	public void setSalary(String Salary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Salary = Salary;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Positions.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Positions toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Positions>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PositionsImpl positionsImpl = new PositionsImpl();

		positionsImpl.setUuid(getUuid());
		positionsImpl.setPositions_id(getPositions_id());
		positionsImpl.setPosition_name(getPosition_name());
		positionsImpl.setIs_Archive(getIs_Archive());
		positionsImpl.setSalary(getSalary());

		positionsImpl.resetOriginalValues();

		return positionsImpl;
	}

	@Override
	public int compareTo(Positions positions) {
		int value = 0;

		if (getPositions_id() < positions.getPositions_id()) {
			value = -1;
		}
		else if (getPositions_id() > positions.getPositions_id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Positions)) {
			return false;
		}

		Positions positions = (Positions)object;

		long primaryKey = positions.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Positions> toCacheModel() {
		PositionsCacheModel positionsCacheModel = new PositionsCacheModel();

		positionsCacheModel.uuid = getUuid();

		String uuid = positionsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			positionsCacheModel.uuid = null;
		}

		positionsCacheModel.Positions_id = getPositions_id();

		positionsCacheModel.Position_name = getPosition_name();

		String Position_name = positionsCacheModel.Position_name;

		if ((Position_name != null) && (Position_name.length() == 0)) {
			positionsCacheModel.Position_name = null;
		}

		positionsCacheModel.is_Archive = getIs_Archive();

		positionsCacheModel.Salary = getSalary();

		String Salary = positionsCacheModel.Salary;

		if ((Salary != null) && (Salary.length() == 0)) {
			positionsCacheModel.Salary = null;
		}

		return positionsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Positions, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Positions, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Positions, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Positions)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Positions, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Positions, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Positions, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Positions)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Positions>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _Positions_id;
	private String _Position_name;
	private long _is_Archive;
	private String _Salary;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Positions, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Positions)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("Positions_id", _Positions_id);
		_columnOriginalValues.put("Position_name", _Position_name);
		_columnOriginalValues.put("is_Archive", _is_Archive);
		_columnOriginalValues.put("Salary", _Salary);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("Positions_id", 2L);

		columnBitmasks.put("Position_name", 4L);

		columnBitmasks.put("is_Archive", 8L);

		columnBitmasks.put("Salary", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Positions _escapedModel;

}