/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package DataBase.model.impl;

import DataBase.model.Employee;
import DataBase.model.EmployeeModel;
import DataBase.model.EmployeeSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;My_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeeModelImpl
	extends BaseModelImpl<Employee> implements EmployeeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee model instance should use the <code>Employee</code> interface instead.
	 */
	public static final String TABLE_NAME = "My_Employee";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"Prson_id", Types.BIGINT},
		{"LastName", Types.VARCHAR}, {"FirstName", Types.VARCHAR},
		{"Patronymic", Types.VARCHAR}, {"Date_of_birth", Types.TIMESTAMP},
		{"Date_of_start_work", Types.TIMESTAMP}, {"WorkNumber", Types.BIGINT},
		{"Position_Id", Types.BIGINT}, {"HomeNumber", Types.BIGINT},
		{"Bank_id", Types.BIGINT}, {"IsArchive", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Prson_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("LastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Patronymic", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Date_of_birth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("Date_of_start_work", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("WorkNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Position_Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("HomeNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Bank_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("IsArchive", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table My_Employee (uuid_ VARCHAR(75) null,Prson_id LONG not null primary key,LastName VARCHAR(75) null,FirstName VARCHAR(75) null,Patronymic VARCHAR(75) null,Date_of_birth DATE null,Date_of_start_work DATE null,WorkNumber LONG,Position_Id LONG,HomeNumber LONG,Bank_id LONG,IsArchive LONG)";

	public static final String TABLE_SQL_DROP = "drop table My_Employee";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employee.Prson_id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY My_Employee.Prson_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ISARCHIVE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long PRSON_ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Employee toModel(EmployeeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Employee model = new EmployeeImpl();

		model.setUuid(soapModel.getUuid());
		model.setPrson_id(soapModel.getPrson_id());
		model.setLastName(soapModel.getLastName());
		model.setFirstName(soapModel.getFirstName());
		model.setPatronymic(soapModel.getPatronymic());
		model.setDate_of_birth(soapModel.getDate_of_birth());
		model.setDate_of_start_work(soapModel.getDate_of_start_work());
		model.setWorkNumber(soapModel.getWorkNumber());
		model.setPosition_Id(soapModel.getPosition_Id());
		model.setHomeNumber(soapModel.getHomeNumber());
		model.setBank_id(soapModel.getBank_id());
		model.setIsArchive(soapModel.getIsArchive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Employee> toModels(EmployeeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Employee> models = new ArrayList<Employee>(soapModels.length);

		for (EmployeeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EmployeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Prson_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPrson_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Prson_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Employee.class;
	}

	@Override
	public String getModelClassName() {
		return Employee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Employee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Employee, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Employee)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Employee, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Employee, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Employee)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Employee, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Employee, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Employee>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Employee.class.getClassLoader(), Employee.class,
			ModelWrapper.class);

		try {
			Constructor<Employee> constructor =
				(Constructor<Employee>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Employee, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Employee, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Employee, Object>>();
		Map<String, BiConsumer<Employee, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Employee, ?>>();

		attributeGetterFunctions.put("uuid", Employee::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Employee, String>)Employee::setUuid);
		attributeGetterFunctions.put("Prson_id", Employee::getPrson_id);
		attributeSetterBiConsumers.put(
			"Prson_id", (BiConsumer<Employee, Long>)Employee::setPrson_id);
		attributeGetterFunctions.put("LastName", Employee::getLastName);
		attributeSetterBiConsumers.put(
			"LastName", (BiConsumer<Employee, String>)Employee::setLastName);
		attributeGetterFunctions.put("FirstName", Employee::getFirstName);
		attributeSetterBiConsumers.put(
			"FirstName", (BiConsumer<Employee, String>)Employee::setFirstName);
		attributeGetterFunctions.put("Patronymic", Employee::getPatronymic);
		attributeSetterBiConsumers.put(
			"Patronymic",
			(BiConsumer<Employee, String>)Employee::setPatronymic);
		attributeGetterFunctions.put(
			"Date_of_birth", Employee::getDate_of_birth);
		attributeSetterBiConsumers.put(
			"Date_of_birth",
			(BiConsumer<Employee, Date>)Employee::setDate_of_birth);
		attributeGetterFunctions.put(
			"Date_of_start_work", Employee::getDate_of_start_work);
		attributeSetterBiConsumers.put(
			"Date_of_start_work",
			(BiConsumer<Employee, Date>)Employee::setDate_of_start_work);
		attributeGetterFunctions.put("WorkNumber", Employee::getWorkNumber);
		attributeSetterBiConsumers.put(
			"WorkNumber", (BiConsumer<Employee, Long>)Employee::setWorkNumber);
		attributeGetterFunctions.put("Position_Id", Employee::getPosition_Id);
		attributeSetterBiConsumers.put(
			"Position_Id",
			(BiConsumer<Employee, Long>)Employee::setPosition_Id);
		attributeGetterFunctions.put("HomeNumber", Employee::getHomeNumber);
		attributeSetterBiConsumers.put(
			"HomeNumber", (BiConsumer<Employee, Long>)Employee::setHomeNumber);
		attributeGetterFunctions.put("Bank_id", Employee::getBank_id);
		attributeSetterBiConsumers.put(
			"Bank_id", (BiConsumer<Employee, Long>)Employee::setBank_id);
		attributeGetterFunctions.put("IsArchive", Employee::getIsArchive);
		attributeSetterBiConsumers.put(
			"IsArchive", (BiConsumer<Employee, Long>)Employee::setIsArchive);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getPrson_id() {
		return _Prson_id;
	}

	@Override
	public void setPrson_id(long Prson_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Prson_id = Prson_id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPrson_id() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("Prson_id"));
	}

	@JSON
	@Override
	public String getLastName() {
		if (_LastName == null) {
			return "";
		}
		else {
			return _LastName;
		}
	}

	@Override
	public void setLastName(String LastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_LastName = LastName;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_FirstName == null) {
			return "";
		}
		else {
			return _FirstName;
		}
	}

	@Override
	public void setFirstName(String FirstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_FirstName = FirstName;
	}

	@JSON
	@Override
	public String getPatronymic() {
		if (_Patronymic == null) {
			return "";
		}
		else {
			return _Patronymic;
		}
	}

	@Override
	public void setPatronymic(String Patronymic) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Patronymic = Patronymic;
	}

	@JSON
	@Override
	public Date getDate_of_birth() {
		return _Date_of_birth;
	}

	@Override
	public void setDate_of_birth(Date Date_of_birth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Date_of_birth = Date_of_birth;
	}

	@JSON
	@Override
	public Date getDate_of_start_work() {
		return _Date_of_start_work;
	}

	@Override
	public void setDate_of_start_work(Date Date_of_start_work) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Date_of_start_work = Date_of_start_work;
	}

	@JSON
	@Override
	public long getWorkNumber() {
		return _WorkNumber;
	}

	@Override
	public void setWorkNumber(long WorkNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_WorkNumber = WorkNumber;
	}

	@JSON
	@Override
	public long getPosition_Id() {
		return _Position_Id;
	}

	@Override
	public void setPosition_Id(long Position_Id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Position_Id = Position_Id;
	}

	@JSON
	@Override
	public long getHomeNumber() {
		return _HomeNumber;
	}

	@Override
	public void setHomeNumber(long HomeNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_HomeNumber = HomeNumber;
	}

	@JSON
	@Override
	public long getBank_id() {
		return _Bank_id;
	}

	@Override
	public void setBank_id(long Bank_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Bank_id = Bank_id;
	}

	@JSON
	@Override
	public long getIsArchive() {
		return _IsArchive;
	}

	@Override
	public void setIsArchive(long IsArchive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_IsArchive = IsArchive;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalIsArchive() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("IsArchive"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Employee.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Employee toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Employee>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeImpl employeeImpl = new EmployeeImpl();

		employeeImpl.setUuid(getUuid());
		employeeImpl.setPrson_id(getPrson_id());
		employeeImpl.setLastName(getLastName());
		employeeImpl.setFirstName(getFirstName());
		employeeImpl.setPatronymic(getPatronymic());
		employeeImpl.setDate_of_birth(getDate_of_birth());
		employeeImpl.setDate_of_start_work(getDate_of_start_work());
		employeeImpl.setWorkNumber(getWorkNumber());
		employeeImpl.setPosition_Id(getPosition_Id());
		employeeImpl.setHomeNumber(getHomeNumber());
		employeeImpl.setBank_id(getBank_id());
		employeeImpl.setIsArchive(getIsArchive());

		employeeImpl.resetOriginalValues();

		return employeeImpl;
	}

	@Override
	public int compareTo(Employee employee) {
		int value = 0;

		if (getPrson_id() < employee.getPrson_id()) {
			value = -1;
		}
		else if (getPrson_id() > employee.getPrson_id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Employee)) {
			return false;
		}

		Employee employee = (Employee)object;

		long primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Employee> toCacheModel() {
		EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

		employeeCacheModel.uuid = getUuid();

		String uuid = employeeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			employeeCacheModel.uuid = null;
		}

		employeeCacheModel.Prson_id = getPrson_id();

		employeeCacheModel.LastName = getLastName();

		String LastName = employeeCacheModel.LastName;

		if ((LastName != null) && (LastName.length() == 0)) {
			employeeCacheModel.LastName = null;
		}

		employeeCacheModel.FirstName = getFirstName();

		String FirstName = employeeCacheModel.FirstName;

		if ((FirstName != null) && (FirstName.length() == 0)) {
			employeeCacheModel.FirstName = null;
		}

		employeeCacheModel.Patronymic = getPatronymic();

		String Patronymic = employeeCacheModel.Patronymic;

		if ((Patronymic != null) && (Patronymic.length() == 0)) {
			employeeCacheModel.Patronymic = null;
		}

		Date Date_of_birth = getDate_of_birth();

		if (Date_of_birth != null) {
			employeeCacheModel.Date_of_birth = Date_of_birth.getTime();
		}
		else {
			employeeCacheModel.Date_of_birth = Long.MIN_VALUE;
		}

		Date Date_of_start_work = getDate_of_start_work();

		if (Date_of_start_work != null) {
			employeeCacheModel.Date_of_start_work =
				Date_of_start_work.getTime();
		}
		else {
			employeeCacheModel.Date_of_start_work = Long.MIN_VALUE;
		}

		employeeCacheModel.WorkNumber = getWorkNumber();

		employeeCacheModel.Position_Id = getPosition_Id();

		employeeCacheModel.HomeNumber = getHomeNumber();

		employeeCacheModel.Bank_id = getBank_id();

		employeeCacheModel.IsArchive = getIsArchive();

		return employeeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Employee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Employee, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Employee)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Employee, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Employee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Employee, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Employee)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Employee>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _Prson_id;
	private String _LastName;
	private String _FirstName;
	private String _Patronymic;
	private Date _Date_of_birth;
	private Date _Date_of_start_work;
	private long _WorkNumber;
	private long _Position_Id;
	private long _HomeNumber;
	private long _Bank_id;
	private long _IsArchive;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Employee, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Employee)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("Prson_id", _Prson_id);
		_columnOriginalValues.put("LastName", _LastName);
		_columnOriginalValues.put("FirstName", _FirstName);
		_columnOriginalValues.put("Patronymic", _Patronymic);
		_columnOriginalValues.put("Date_of_birth", _Date_of_birth);
		_columnOriginalValues.put("Date_of_start_work", _Date_of_start_work);
		_columnOriginalValues.put("WorkNumber", _WorkNumber);
		_columnOriginalValues.put("Position_Id", _Position_Id);
		_columnOriginalValues.put("HomeNumber", _HomeNumber);
		_columnOriginalValues.put("Bank_id", _Bank_id);
		_columnOriginalValues.put("IsArchive", _IsArchive);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("Prson_id", 2L);

		columnBitmasks.put("LastName", 4L);

		columnBitmasks.put("FirstName", 8L);

		columnBitmasks.put("Patronymic", 16L);

		columnBitmasks.put("Date_of_birth", 32L);

		columnBitmasks.put("Date_of_start_work", 64L);

		columnBitmasks.put("WorkNumber", 128L);

		columnBitmasks.put("Position_Id", 256L);

		columnBitmasks.put("HomeNumber", 512L);

		columnBitmasks.put("Bank_id", 1024L);

		columnBitmasks.put("IsArchive", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Employee _escapedModel;

}